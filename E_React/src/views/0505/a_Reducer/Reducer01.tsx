import React from 'react'

//! React 상태 관리
// : 컴포넌트의 동작과 렌더링을 제어하는 중요한 부분

//& 상태
// 컴포넌트의 변경 가능한 데이터를 의미
// : 사용자의 액션, 네트워크 응답 등에 의해 변경

//? 왜 상태 관리가 필요한가?
// 동적 UI 구현: 사용자의 입력, 서버 응답, 시간 경과 등 다양한 이벤트에 따라 UI를 업데이트해야 할 때 변화된 상태가 필요
// 컴포넌트 간의 데이터 공유: 서로 다른 컴포넌트 간에 상태를 공유하고, 이 상태를 기반으로 서로 영향을 주고받기 위해 각자의 컴포넌트가 상태를 관리하고 있어야 함

// >> 주로 사용자 인터페이스의 동적 요소를 관리하기 위해 사용
//   예를 들어, 입력 폼, 개별 컴포넌트의 활성화 상태 등

//? 상태 관리의 예시
// 폼 입력 값 관리
// 사용자 인터페이스 상태 (예: 열려 있는 드롭다운 메뉴)
// 사용자 세션 데이터 (로그인 상태 등)

//& useReducer 사용 이유와 적합한 상황
// 1) 사용 이유
// 복잡한 상태 로직 관리: 여러 값이 연동되어 변경되어야 하는 복잡한 상태 로직을 관리할 때 유용
// 중앙 집중식 관리: 상태 업데이트 로직을 한 곳에 모아서 관리할 수 있어 코드의 가독성과 유지 관리가 쉬움
// 테스트 용이성: 리듀서 함수는 순수 함수이므로 테스트가 용이

// 2) 적합한 상황
// 복수의 하위 값이 있는 복잡한 상태 객체: 상태가 다중 차원적이며 여러 하위 값들을 포함하는 경우
// 상태 로직이 여러 이벤트에 걸쳐 있을 때: 같은 상태에 대한 여러 변경이 다양한 이벤트에 의해 발생하는 경우
// 전역 상태의 로컬 관리: 컴포넌트의 로컬 상태로 전역 상태를 효과적으로 모방하고 싶을 때

export default function Reducer01() {
  return (
    <div>Reducer01</div>
  )
}
